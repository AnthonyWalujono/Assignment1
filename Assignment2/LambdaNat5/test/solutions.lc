/// member

// Should be: 1

let rec member = \elem. \list.
    if elem = (hd list) then 1 else
        if list = # then 0 else
            member elem (tl list)
in
member 1 2:3:1:#

;;

/// remove

// Should be: 1 : 3 : 1 : 2 : 3 : #

let rec remove = \elem. \list.
    if elem = # then # else
        if elem = hd list then tl list else
            (hd list) : (remove elem (tl list))
in
remove 2 1:2:3:1:2:3:#

;;

/// sum

// Should be: 10

let rec sum = \list.
    if list = # then 0 else
        (hd list) + (sum (tl list))
in
sum 1:2:3:4:#

;;

/// prod

// Should be: 24

let rec prod = \list.
    if list = # then 1 else
        (hd list) * (prod (tl list))
in
prod 1:2:3:4:#

;;

/// plus_two and map

// Should be: 3 : 4 : 5 : 6 : #

let plus_two = \x . x + 2
in
let rec map = \func . \list .
    if list = # then # else
        (func (hd list)) : (map func (tl list))
in
map plus_two 1:2:3:4:#

;;

/// insert and sort

// Should be: 1 : 1 : 2 : 2 : 3 : 3 : #

let rec insert = \elem . \list .
    if list = # then elem : # else
        if elem less_equal (hd list) = 1 then elem : list else
            (hd list) : (insert elem (tl list))
in 
let rec sort = \list .
    if list = # then # else
        insert (hd list) (sort (tl list))
in
sort 1:2:3:1:2:3:#

;;
